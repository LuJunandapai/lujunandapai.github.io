import{_ as n,p as s,q as a,Y as e}from"./framework-e1bed10d.js";const i={},t=e(`<h2 id="git-命令上传流程" tabindex="-1"><a class="header-anchor" href="#git-命令上传流程" aria-hidden="true">#</a> Git 命令上传流程</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 将所有文件添加到暂存区 
<span class="token number">2</span>. <span class="token function">git</span> commit <span class="token parameter variable">-m</span> “提交信息” 将暂存区所有文件进行本地提交 
<span class="token number">3</span>. 第二次推送用 <span class="token function">git</span> push 将本地 <span class="token function">git</span> 仓库中的文件推送到远程仓库
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-命令" tabindex="-1"><a class="header-anchor" href="#git-命令" aria-hidden="true">#</a> Git 命令</h2><h3 id="设置用户名和邮件地址" tabindex="-1"><a class="header-anchor" href="#设置用户名和邮件地址" aria-hidden="true">#</a> 设置用户名和邮件地址</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config –global user.name “xxx”
<span class="token function">git</span> config –global user.email “<span class="token punctuation">[</span>xxx@qq.com<span class="token punctuation">]</span><span class="token punctuation">(</span>mailto:xxx@qq.com<span class="token punctuation">)</span>“
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基础命令" tabindex="-1"><a class="header-anchor" href="#基础命令" aria-hidden="true">#</a> 基础命令</h3><blockquote><p>在项目根目录右键打开 Git Base Here</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token function">git</span> init 初始化仓库 —-这是项目根目录下 会出现一个.git 文件，这就是本地仓库
<span class="token number">2</span>. <span class="token function">git</span> status 检查该目录下文件的状态 加 <span class="token parameter variable">-s</span> 简洁查看状态
<span class="token number">3</span>. <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 将所有文件跟踪并暂存到 <span class="token function">git</span> 中（暂存区） <span class="token function">git</span> <span class="token function">add</span> 文件名 只将该文件跟踪并暂存到 <span class="token function">git</span> 中
<span class="token number">4</span>. <span class="token function">git</span> commit <span class="token parameter variable">-m</span> ‘提交信息’ 将项目进行本地提交 <span class="token punctuation">(</span>也就是本地仓库<span class="token punctuation">)</span> 执行完 commit 后才有主分支 master
<span class="token number">5</span>. <span class="token function">git</span> log 可以查看所有提交的版本
<span class="token number">6</span>. <span class="token function">git</span> remote <span class="token function">add</span> origin 远程创库地址； 将本地仓库和远程仓储关联，并使用 origin 做为远程仓储的别名
   第一次推送用
<span class="token number">7</span>. <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin “分支名称” 将本地当前分支上和分支上的代码推送到到远程仓库
   <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master 将本地的 master 分支推送到远程仓库 <span class="token function">git</span> push 来推送代码
   <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin login 将本地的 login 分支推送到远程仓库 <span class="token function">git</span> push 来推送代码
   <span class="token function">git</span> remote show 远程仓库名称 查看远程仓库所有的分支
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支命令" tabindex="-1"><a class="header-anchor" href="#分支命令" aria-hidden="true">#</a> 分支命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch 查看分支
<span class="token function">git</span> branch 分支名称 创建分支
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名称 删除分支
<span class="token function">git</span> checkout 分支名称 切换分支
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 分支名称 创建并切换分支
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>合并分支</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master 切换到主分支 master
<span class="token function">git</span> merge login 先切换到主分支在合并 login 分支
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> login 先切换到主分支在删除本地 login 分支 如果没有合并就删除会报错，加-D 可以强制删除 login 分支
<span class="token function">git</span> push origin –delete reg 删除远程仓库中指定的分支
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>拉取远程分支</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch origin 远程分支名 将远程分支拉到本地
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 本地分支 origin/远程分支 创建本地分支并切换到该分支，同时将本地分支和远程分支进行关联。
<span class="token function">git</span> pull origin 远程分支名<span class="token punctuation">(</span>login<span class="token punctuation">)</span> 将远程分支代码拉取到本地当前分支上<span class="token punctuation">(</span>login<span class="token punctuation">)</span>
<span class="token function">git</span> pull origin master 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。
<span class="token function">git</span> pull origin master:brantest 将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="功能命令" tabindex="-1"><a class="header-anchor" href="#功能命令" aria-hidden="true">#</a> 功能命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone “远程仓库地址” //克隆项目
<span class="token function">git</span> init //初始化代码仓库
<span class="token function">git</span> <span class="token function">add</span> learngit.txt //把所有要提交的文件修改放到暂存区 <span class="token function">git</span> <span class="token function">add</span> .将所有文件提交到暂存区
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> ‘add a file’ //把暂存区的所有内容提交到当前分支
<span class="token function">git</span> status //查看工作区状态
<span class="token function">git</span> <span class="token function">diff</span> //查看文件修改内容
<span class="token function">git</span> log //查看提交历史
<span class="token function">git</span> log –pretty<span class="token operator">=</span>oneline //单行显示
<span class="token function">git</span> reset –hard //回退到上一个版本，其中（CommitId 是版本的 id）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[t];function l(o,p){return s(),a("div",null,c)}const r=n(i,[["render",l],["__file","GitLu.html.vue"]]);export{r as default};
