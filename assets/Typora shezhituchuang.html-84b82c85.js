import{_ as e,p as t,q as o,s as a,R as n,t as p,Y as i,n as c}from"./framework-e1bed10d.js";const r={},l=a("h1",{id:"typora",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#typora","aria-hidden":"true"},"#"),n(" Typora")],-1),u=a("blockquote",null,[a("p",null,"Typora 设置 阿里云 oss对象存储 作为云盘: https://blog.csdn.net/muxuen/article/details/122441469")],-1),d=a("h2",{id:"typora-设置-githube-作为图床",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#typora-设置-githube-作为图床","aria-hidden":"true"},"#"),n(" Typora 设置 Githube 作为图床")],-1),h={href:"https://blog.csdn.net/qq_49488584/article/details/121528675",target:"_blank",rel:"noopener noreferrer"},m=i(`<h3 id="在设置-获取-token" tabindex="-1"><a class="header-anchor" href="#在设置-获取-token" aria-hidden="true">#</a> 在设置 获取 Token</h3><p><img src="https://raw.githubusercontent.com/LuJunandapai/ApaiImage/main/imageMD_imagesimage-20230509155028714.png" alt="image-20230509155028714"></p><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><p><img src="https://raw.githubusercontent.com/LuJunandapai/ApaiImage/main/imageMD_imagesMD_imagesimage-20230509154908143.png" alt="image-20230509154908143"></p><h3 id="配置-picgo-设置" tabindex="-1"><a class="header-anchor" href="#配置-picgo-设置" aria-hidden="true">#</a> 配置 PicGo 设置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>设定仓库名<span class="token operator">:</span> <span class="token punctuation">[</span>github用户名<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">[</span>新建的仓库名称<span class="token punctuation">]</span>
设定分支名<span class="token operator">:</span> <span class="token function">main</span><span class="token punctuation">(</span>默认<span class="token punctuation">,</span> 可指定<span class="token punctuation">)</span>
设定<span class="token class-name">Token</span><span class="token operator">:</span> token获取的
设定存储路径<span class="token operator">:</span> 可填可不填，如果填写了，图片就会存储在img文件夹下
设定自定义域名<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span><span class="token punctuation">[</span>github用户名<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">[</span>仓库名<span class="token punctuation">]</span><span class="token annotation punctuation">@main</span>
设定自定义域名<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">[</span>github用户名<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">[</span>仓库名<span class="token punctuation">]</span><span class="token operator">/</span>main
<span class="token comment">// 注意: </span>
<span class="token comment">// 1.此处的分支一定要填写@main，否则默认使用master分支。而现在github创建的默认分支名为main，如果不指定，则会出现图片不能上传的情况。</span>
<span class="token comment">// 2.遇到上传失败可以换域名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/LuJunandapai/ApaiImage/main/imageMD_imagesimage-20230509154636289.png" alt="image-20230509154636289"></p>`,7);function k(g,b){const s=c("ExternalLinkIcon");return t(),o("div",null,[l,u,d,a("p",null,[a("a",h,[n("参考 CSDN 路径"),p(s)])]),m])}const v=e(r,[["render",k],["__file","Typora shezhituchuang.html.vue"]]);export{v as default};
